<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/communities.css" />
  <link rel="stylesheet" href="/css/com-btn-container.css" />

  <link rel="shortcut icon" href="/img/core.png" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

  <title>CORE/<%= communityId ? community.shortname : 'Home' %>

  </title>
</head>

<body>
  <%- include('partials/navbar', { pagePath: '', user: user}) %>
  <main>
    <div class="container">

      <%- include('partials/com-btn-container', { }) %>


      <div id="posts-container" data-community-id="<%= communityId %>" class="column">
        <% if (communityId != null) { %>
        <div class="community" style="margin: 0 13px; margin-bottom: 0px; margin-top: 10px; border: 0; background-color: rgba(0,0,0,0);">
          <div class="community-content">
            <div class="community-info">
              <div class="community-title">
                <span class="comm-title">
                  <h2 style="font-weight: 500"><%= community.name%></h2>
                </span>
                <span class="comm-short-title">/<%= community.shortname %></span>
                <button class="btn" id="communityActionBtn" data-action="join">Join</button>

              </div>
              <div class="comm-description">
                <%= community.description%>
              </div>
              <div class="community-flairs">
                <span class="community-flair">üë§ <%= community.MemberCount ? community.MemberCount : 0 %> members</span>
                <span class="community-flair">‚úâÔ∏è <%= communityPostCount %> posts</span>
                <span class="community-flair">üü¢ 1 active</span>
              </div>
              <div class="community-picture">
              </div>
            </div>
          </div>
        </div>
        <% } %>
        <% if (typeof community === 'undefined' || community == null) { %>

        <div class="mobile-jobs-container">
          <div class="job-header">
            <h5>Openings</h5>
          </div>
          <div class="jobslist">

          </div>
        </div>
        <% } %>
      </div>
      <div class="jobs-container">
        <div class="job-header">
          <h5>Openings</h5>
        </div>
        <div class="jobslist">

        </div>
      </div>
    </div>
  </main>

  <script defer>
    document.addEventListener('DOMContentLoaded', () => {
      fetchJobPreviews();
    });

    function getTintFromName(name) {
      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 18) - hash);
      }
      const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
      const tintColor = `#${color}65`;
      return tintColor;
    }

    function getTintFromNameSecondary(name) {
      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 18) - hash);
      }
      const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
      const tintColor = `#${color}`;
      return tintColor;
    }

    function fetchJobPreviews() {
      fetch('/api/jobs')
        .then(response => response.json())
        .then(jobs => {
          const isMobile = window.matchMedia('(max-width: 768px)').matches;
          let jobslistContainer;
          if (isMobile) {
            jobslistContainer = document.querySelector('#posts-container > div.mobile-jobs-container > div.jobslist');
          } else {
            jobslistContainer = document.querySelector('body > main > div.container > div.jobs-container > div.jobslist');
          }

          jobslistContainer.innerHTML = jobs.map(job => `
        <div class="job" onclick="window.location.href='/jobs/${job.id}'">
          <div class="job-content">
            <div class="jobs-header">
              <div class="company-logo-container">
                <img loading="lazy" src="${job.company_logo}" alt="Company Logo" class="company-logo" />
              </div>
              <div class="job-title-location">
                <div class="job-posting-header">
                  <div class="company-name">${job.company_name}</div>
                </div>
              </div>
            </div>
            <div class="job-title">${job.title.slice(0, 40)}</div>
            <div class="job-flairs">
              <span class="job-flair" id="pay-flair">$${Math.floor(
            (job.salary + job.salary_max) / 2 / 1000
          )}k</span>
              <span class="job-flair" id="location-flair" data-location="${formatLocation(job.location)}">${formatLocation(job.location)}</span>
            </div>
          </div>
        </div>
      `).join('');

          jobslistContainer.innerHTML += '<div class="see-more"><img loading="lazy" src="./src/core.png" class="company-logo" id="see-more-core-logo"><span id="see-more-separator">&#183;</span><a href="/jobs">See More</a></div>';

          // Set the --location-color CSS variable for each job element
          const jobElements = jobslistContainer.querySelectorAll('.job');
          jobElements.forEach(jobElement => {
            const locationFlair = jobElement.querySelector('#location-flair');
            const location = locationFlair.dataset.location;
            locationFlair.style.setProperty('--location-color', getTintFromName(location));
            locationFlair.style.setProperty('--location-color-text', getTintFromNameSecondary(location));

          });
        })
        .catch(error => {
          console.error('Error fetching job previews:', error);
        });
    }

    function formatLocation(location) {
      const parts = location.split(',').map(part => part.trim());

      if (parts.length >= 3) {
        return `${parts[1]}`;
      } else if (parts.length === 1) {
        return location;
      } else {
        return location;
      }
    }

    function formatSalary(salary) {
      if (salary >= 1000000) {
        return '$' + (salary / 1000000).toFixed(1) + 'M';
      } else if (salary >= 1000) {
        return '$' + (salary / 1000).toFixed(0) + 'k';
      } else {
        return '$' + salary;
      }
    }

    function showLoader() {
      document.getElementById('loadingAnimation').style.display = 'block';
    }

    function hideLoader() {
      document.getElementById('loadingAnimation').style.display = 'none';
    }

    function toggleFilterMenu() {
      const filterMenu = document.getElementById('filterMenu');
      const buttonRect = document.getElementById('filter-button').getBoundingClientRect();

      if (filterMenu.style.display === 'block') {
        filterMenu.style.display = 'none';
      } else {
        filterMenu.style.display = 'block';
      }
    }


    function fetchAndDisplayPosts(communityId = null, sortBy = 'trending') {
      const loggedIn = typeof user !== 'undefined' && user !== null;
      let apiUrl;

      if (loggedIn) {
        apiUrl = communityId ? `/api/communities/${communityId}/posts?sortBy=${sortBy}&userId=${user.id}` : `/api/posts?sortBy=${sortBy}&userId=${user.id}`;
      } else {
        apiUrl = communityId ? `/api/communities/${communityId}/posts?sortBy=${sortBy}` : `/api/posts?sortBy=${sortBy}`;
      }
      fetch(apiUrl)
        .then(response => response.json())
        .then(posts => {
          const postsContainer = document.getElementById('posts-container');
          const fetchPromises = [];

          // Remove the existing header element
          const existingHeader = postsContainer.querySelector('.community-header');
          if (existingHeader) {
            existingHeader.remove();
          }

          const communityHeader = document.createElement('div');
          communityHeader.className = 'community-header';
          communityHeader.innerHTML = `
        <div class="post-header-title">
          <h5>${sortBy.charAt(0).toUpperCase() + sortBy.slice(1)} Posts</h5> 
        </div>
        <div class=post-header-buttons style="position:relative;">
                  <button class="header-button" id="filter-button" onclick="toggleFilterMenu()">
<span class="material-symbols-outlined">
filter_list
</span>
          </button>
                  <% if (user) { %>
            <button class="header-button" id="post-button" onclick="window.location.href='/create'" style="padding: 6px 13px;;">+</button>
          <% } %>

          <div class="filter-menu" id="filterMenu">
            <button class="filter-button" onclick="filterPosts('trending')">
              <span style="margin-left: 10px;">Trending</span>
                            <span class="material-symbols-outlined" style="font-weight: 300; font-size: 20px;">trending_up</span>

              </button>
            <button class="filter-button" onclick="filterPosts('new')">
            <span style="margin-left: 10px;">New</span>
                        <span class="material-symbols-outlined" style="font-weight: 300; font-size: 20px;">new_releases</span>

            </button>
            <button class="filter-button" onclick="filterPosts('top')">
            <span style="margin-left: 10px;">Top</span>
            <span class="material-symbols-outlined" style="font-weight: 300; font-size: 20px;">star</span>

            </button>
            <button class="filter-button" onclick="filterPosts('explore')">
            <span style="margin-left: 10px;">Explore</span>
            <span class="material-symbols-outlined" style="font-weight: 300; font-size: 20px;">explore</span>

            </button>
          </div>

        </div>
      `;

          postsContainer.appendChild(communityHeader);


          posts.forEach(post => {
            // Main post div
            const postDiv = document.createElement('div');
            postDiv.className = 'post';
            postDiv.onclick = () => window.location.href = '/posts/' + post.id;


            // Post content div
            const postContentDiv = document.createElement('div');
            postContentDiv.className = 'post-content';

            // Post header div
            const postHeaderDiv = document.createElement('div');
            postHeaderDiv.className = 'post-header';


            const postHeaderUsernameDiv = document.createElement('div');
            postHeaderUsernameDiv.className = 'post-header-username';

            // avatar div
            const avatarDiv = document.createElement('div');
            avatarDiv.className = 'avatar';
            const avatarImg = document.createElement('img');
            avatarImg.src = post.avatar;
            avatarImg.loading = "lazy";
            avatarDiv.appendChild(avatarImg);
            postHeaderUsernameDiv.appendChild(avatarDiv);

            // Username, community and current job div
            const usernameDiv = document.createElement('div');
            usernameDiv.className = 'username';
            const usernameLink = document.createElement('a');
            usernameLink.className = 'username-link';
            usernameLink.href = '/user/' + post.username;
            usernameLink.innerHTML = '<strong>' + post.username + '</strong>';
            usernameDiv.appendChild(usernameLink);




            const postTypeDiv = document.createElement("span");
            postTypeDiv.className = "communities-text";


            usernameDiv.appendChild(postTypeDiv);
            const communityLink = document.createElement('a');
            communityLink.href = '/c/' + post.communities_id;
            communityLink.className = 'community';
            communityLink.innerText = "";
            usernameDiv.appendChild(communityLink);




            const postDateDiv = document.createElement('div');
            postDateDiv.className = 'post-date';
            postDateDiv.id = 'secondary-text';
            const communityName = document.createElement('span');
            communityName.innerText = post.community_name;
            communityName.style.color = post.community_color;
            postDateDiv.appendChild(communityName);

            const dateText = document.createElement('span');
            dateText.innerText = " ‚Ä¢ " + formatDate(post.created_at) + " ‚Ä¢ " + post.views + " views";
            postDateDiv.appendChild(dateText);



            usernameDiv.appendChild(postDateDiv);


            postHeaderUsernameDiv.appendChild(usernameDiv);
            postHeaderDiv.appendChild(postHeaderUsernameDiv);
            const threeDotsDiv = document.createElement('div');
            threeDotsDiv.className = 'three-dots';
            threeDotsDiv.innerHTML = '<span class="material-symbols-outlined" style="font-weight: 300; font-size: 22px;">more_horiz</span>';
            threeDotsDiv.onclick = async (event) => {
              event.stopPropagation(); // Prevent the click event from propagating to the post header

              if (navigator.share) {
                try {
                  await navigator.share({
                    url: window.location.origin + '/posts/' + post.id,
                  });
                } catch (error) {
                  console.error('Error sharing:', error);
                }
              } else {
                console.warn('Web Share API not supported');
                // Fallback to custom share menu or other sharing method
              }
            };
            postHeaderDiv.appendChild(threeDotsDiv);

            postContentDiv.appendChild(postHeaderDiv);

            // Title div
            const titleDiv = document.createElement('div');
            titleDiv.className = 'title';
            titleDiv.innerText = post.title;
            titleDiv.onclick = () => window.location.href = '/posts/' + post.id;

            postContentDiv.appendChild(titleDiv);

            const linkPreviewDiv = document.createElement('div');
            linkPreviewDiv.className = 'link-preview';
            linkPreviewDiv.onclick = () => window.location.href = '/posts/' + post.id;

            postContentDiv.appendChild(linkPreviewDiv);

            if (post.link) {
              const linkDiv = document.createElement('div');
              linkDiv.className = 'link';
              linkDiv.innerHTML = '<div class="placeholder-link-preview">Loading link preview...</div>'; // Placeholder
              linkPreviewDiv.appendChild(linkDiv);
              fetchPromises.push(fetchLinkPreview(post.link, linkDiv));
            }

            if (post.post_type != 'question') {

              if (((post.post_type == "discussion" || post.post_type == "project") && post.link)) {
                // just chill 
              } else {
                linkPreviewDiv.style.background = "none";
                linkPreviewDiv.style.border = "none";
                const descriptionDiv = document.createElement('div');
                descriptionDiv.className = 'description';

                if (post.post_type != 'blog') {
                  let contentWithoutMarkdown = post.content.replace(/(?:\r\n|\r|\n)/g, '<br />').replace(/\*\*(.*?)\*\*/g, '$1').replace(/\*(.*?)\*/g, '$1').replace(/__(.*?)__/g, '$1').replace(/_(.*?)_/g, '$1');
                  descriptionDiv.append(`${contentWithoutMarkdown}`);
                } else {
                  if (post.subtitle) {
                    descriptionDiv.append(`${post.subtitle}`);
                  } else {
                    descriptionDiv.append(`${post.content}`);
                  }
                }

                linkPreviewDiv.appendChild(descriptionDiv);
              }
            }

            if (post.post_type == 'question') {
              linkPreviewDiv.style.background = "none";
              linkPreviewDiv.style.border = "none";
            }

            // Votes div
            const votesDiv = document.createElement("div");
            votesDiv.className = "votes";

            // Reaction interactions div
            const reactionInteractionsDiv = document.createElement("div");
            reactionInteractionsDiv.className = `reaction-interactions ${post.id}-reactions`;
            reactionInteractionsDiv.id = `reaction-interactions ${post.id}-reactions`;


            const mainReactionButton = document.createElement("button");
            mainReactionButton.className = "main-reaction-button";
            mainReactionButton.innerText = "üöÄ";
            reactionInteractionsDiv.appendChild(mainReactionButton);


            const reactionMenu = document.createElement("div");
            reactionMenu.className = "reaction-menu";

            document.body.appendChild(reactionMenu);

            mainReactionButton.onmouseover = function() {
              reactionMenu.style.display = "block";
            };



            // Reaction buttons
            const reactionTypes = [{
                type: "BOOST",
                icon: "‚ö°Ô∏è"
              },
              {
                type: "LOVE",
                icon: "‚ù§Ô∏è"
              },
              {
                type: "LIKE",
                icon: "üëç"
              },
              {
                type: "CURIOUS",
                icon: "ü§î"
              },
              {
                type: "INTERESTING",
                icon: "üí°"
              },
              {
                type: "CELEBRATE",
                icon: "üéâ"
              },
            ];

            if (post.userReaction != null && reactionTypes.find(reaction => reaction.type === post.userReaction)) {
              mainReactionButton.innerText = reactionTypes.find(reaction => reaction.type === post.userReaction).icon;
              mainReactionButton.classList.add('active');
            }

            const topReactions = reactionTypes.filter(reaction => post[reaction.type.toLowerCase() + 'Count'] > 0)
              .sort((a, b) => post[b.type.toLowerCase() + 'Count'] - post[a.type.toLowerCase() + 'Count'])
              .slice(0, 3);

            let totalReactions = 0;
            reactionTypes.forEach(reaction => {
              totalReactions += post[reaction.type.toLowerCase() + 'Count'];
            });
            const topReactionsDiv = document.createElement("div");
            topReactions.forEach(reaction => {
              const icon = document.createElement("span");
              icon.className = `reaction-icon ${reaction.type.toLowerCase()}-icon-${post.id}`;
              icon.innerText = reaction.icon;
              topReactionsDiv.className = `top-reactions ${reaction.type.toLowerCase()}-top-reactions-${post.id}`;
              topReactionsDiv.appendChild(icon);
            });

            if (totalReactions > 0) {
              reactionInteractionsDiv.appendChild(topReactionsDiv);
            }

            const totalReactionsText = document.createElement("span");
            totalReactionsText.className = `total-reactions-count ${post.id}`;
            totalReactionsText.innerText = totalReactions > 0 ? `${totalReactions} reactions` : "0 reactions";
            reactionInteractionsDiv.appendChild(totalReactionsText);
            reactionTypes.forEach(reaction => {
              const button = document.createElement("button");
              button.innerText = reaction.icon + ' ' + post[reaction.type.toLowerCase() + 'Count'];
              button.onclick = () => interactWithPost(event, post.id, "<%= user %>", reaction.type);
              reactionMenu.appendChild(button);
            });

            let showMenuTimeout; // Variable to hold the timeout for showing the menu
            let hideMenuTimeout; // Variable to hold the timeout for hiding the menu

            // cancel showing menu if you click the button a second time otherwise show the menu
            mainReactionButton.addEventListener('click', () => {
              event.stopPropagation();

              clearTimeout(showMenuTimeout);
              if (reactionMenu.style.display === 'flex') {
                reactionMenu.style.opacity = '0';
                setTimeout(() => { // Delay for opacity transition
                  reactionMenu.style.display = 'none';
                }, 200);
              } else {
                clearTimeout(showMenuTimeout);
                showMenuTimeout = setTimeout(() => {
                  let rect = mainReactionButton.getBoundingClientRect();
                  reactionMenu.style.display = 'flex';
                  reactionMenu.style.opacity = '0';
                  reactionMenu.style.left = `${rect.left + window.scrollX}px`;
                  reactionMenu.style.top = `${rect.top + window.scrollY - reactionMenu.offsetHeight - 5}px`;
                  reactionMenu.style.opacity = '1';
                  hideMenuTimeout = setTimeout(() => {
                    reactionMenu.style.opacity = '0';
                    reactionMenu.style.display = 'none';
                  }, 2000);
                }, 200);
              }
            });

            reactionMenu.addEventListener('mouseleave', () => {
              hideMenuTimeout = setTimeout(() => {
                reactionMenu.style.opacity = '0';
                setTimeout(() => {
                  reactionMenu.style.display = 'none';
                }, 200);
              }, 500);
            });

            votesDiv.appendChild(reactionInteractionsDiv);
            postContentDiv.appendChild(votesDiv);

            const commentsDiv = document.createElement('div');
            commentsDiv.className = 'comments';
            commentsDiv.innerHTML = 'Loading comments...'; // Placeholder
            votesDiv.appendChild(commentsDiv);
            fetchPromises.push(fetchComments(post.id, commentsDiv));


            postDiv.appendChild(postContentDiv);
            postsContainer.appendChild(postDiv);
          });
          return Promise.all(fetchPromises);

          if (posts.length === 0) {
            const noPostsDiv = document.createElement('div');
            noPostsDiv.className = 'no-posts';
            noPostsDiv.innerText = 'No posts to show';
            postsContainer.appendChild(noPostsDiv);
          }

        })
        .catch(error => console.error('Error fetching posts:', error));
    }

    <% if (communityId) {%>
    document.addEventListener("DOMContentLoaded", function() {
      const communityActionBtn = document.getElementById("communityActionBtn");
      const memberCountElement = document.querySelector('.community-member-count');

      function updateMemberCount(isJoining) {
        let memberCount = parseInt(memberCountElement.textContent.split(' ')[0]);
        if (isJoining) {
          memberCountElement.textContent = `${memberCount + 1} members`; // Increment on join
        } else {
          memberCountElement.textContent = `${Math.max(0, memberCount - 1)} members`; // Decrement on leave, prevent negative numbers
        }
      }

      // Function to toggle community membership
      function toggleCommunityMembership() {
        const action = communityActionBtn.dataset.action; // "join" or "leave"
        const url = `/c/<%= community.name %>/${action}`;

        fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              // Authorization header if needed
            },
          })
          .then(response => {
            if (response.ok) {
              return response.json(); // Adjust based on actual response
            }
            throw new Error('Failed to perform action');
          })
          .then(data => {
            // Toggle button state
            if (action === "join") {
              communityActionBtn.textContent = "Leave";
              communityActionBtn.dataset.action = "leave";
              updateMemberCount(true); // Optimistically increment member count

            } else {
              communityActionBtn.textContent = "Join";
              communityActionBtn.dataset.action = "join";
              updateMemberCount(false); // Optimistically decrement member count

            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert("Error performing action.");
          });
      }

      // Function to check membership and update button
      function checkMembershipAndUpdateButton() {
        fetch(`/c/<%= community.shortname %>/isMember`)
          .then(response => response.json())
          .then(data => {
            if (data.isMember) {
              communityActionBtn.textContent = "Leave";
              communityActionBtn.dataset.action = "leave";
            } else {
              communityActionBtn.textContent = "Join";
              communityActionBtn.dataset.action = "join";
            }
            communityActionBtn.addEventListener("click", toggleCommunityMembership);
          })
          .catch(error => console.error('Error checking membership:', error));

        fetch(`/api/communities/${communityId}`)
          .then(response => response.json())
          .then(community => {
            document.querySelector('.community-member-count').textContent = `${community.MemberCount} members`;
          })
          .catch(error => console.error('Error fetching updated community details:', error));
      }

      // Initially check membership and set button state
      checkMembershipAndUpdateButton();
    });
    <% }%>


    document.addEventListener("DOMContentLoaded", function() {
      var deadlineElements = document.querySelectorAll('#job-posting-deadline');
      var currentDate = new Date();
      var deadlineDate = new Date(currentDate.getTime() + (24 * 60 * 60 * 1000)); // Adds one day

      var month = deadlineDate.getMonth() + 1; // getMonth() returns 0-11
      var day = deadlineDate.getDate(); // getDate() returns 1-31

      // Ensure month and day are always two digits
      var formattedMonth = month < 10 ? '0' + month : month;
      var formattedDay = day < 10 ? '0' + day : day;

      var formattedDeadline = formattedMonth + '/' + formattedDay;

      deadlineElements.forEach(function(elem) {
        elem.textContent = 'Exp: ' + formattedDeadline;
      });
    });


    function fetchLinkPreview(link, container) {
      return fetch(`/api/link-preview/${encodeURIComponent(encodeURIComponent(link))}`)
        .then(response => response.json())
        .then(linkPreview => {
          if (linkPreview) {
            let imageUrl = linkPreview.image || linkPreview.favicon;
            let htmlContent = `
          <div class="mini-link">
              <div class="mini-link-image">
                  ${imageUrl ? `<img loading="lazy" src="${imageUrl}" alt="thumbnail" class="thumbnail-image" />` : ''}
              </div>
              <div class="mini-link-body">
                  <div class="mini-link-body-header">
                  <div class="mini-link-favicon">
                    <img src="${linkPreview.favicon}" alt="" class="favicon" />
                  </div>
                  <div class="mini-link-url" id="main-text"><a>${new URL(linkPreview.url || '').hostname || ''}</a></div>
                  </div>
                  <div class="mini-link-title">${linkPreview.title || ''}</div>
                  <div class="mini-link-desc" id="secondary-text">${linkPreview.description || ''}</div>
              </div>
          </div>`;
            container.innerHTML = htmlContent;
          }
        });
    }

    function fetchComments(postId, container) {
      return fetch(`/api/comments/${postId}`)
        .then(response => response.json())
        .then(comments => {
          container.innerHTML = comments.length + ' comment' + (comments.length !== 1 ? 's' : '');
        });
    }

    function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + ' minutes ago';
      } else if (hours < 24) {
        formattedDate = hours + ' hours ago';
      } else if (days < 365) {
        formattedDate = days + ' days ago';
      } else {
        formattedDate = years + ' years ago';
      }
      return formattedDate;
    }

    function shortenContent(content) {
      if (content.length > 130) {
        return content.substring(0, 130) + '-...';
      } else {
        return content;
      }
    }

    function filterPosts(filter) {
      const postsContainer = document.getElementById('posts-container');
      const communityId = postsContainer.dataset.communityId;
      const posts = postsContainer.getElementsByClassName('post');

      while (posts.length > 0) {
        posts[0].parentNode.removeChild(posts[0]);
      }

      fetchAndDisplayPosts(communityId, filter.toLowerCase());
    }
    document.addEventListener("DOMContentLoaded", () => {
      const postsContainer = document.getElementById('posts-container');
      const communityId = postsContainer.dataset.communityId;
      fetchAndDisplayPosts(communityId);
    });

    function interactWithPost(event, postId, user, action) {
      event.stopPropagation();
      const mainReactionButton = document.querySelector(`.${postId}-reactions .main-reaction-button`);

      const reactionTypes = [{
          type: "BOOST",
          icon: "‚ö°Ô∏è"
        },
        {
          type: "LOVE",
          icon: "‚ù§Ô∏è"
        },
        {
          type: "LIKE",
          icon: "üëç"
        },
        {
          type: "CURIOUS",
          icon: "ü§î"
        },
        {
          type: "INTERESTING",
          icon: "üí°"
        },
        {
          type: "CELEBRATE",
          icon: "üéâ"
        },
      ];


      if (!user) {
        window.location.href = '/login';
        return;
      }

      fetch(`/posts/${postId}/react`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            user: user,
            action: action.toLowerCase()
          })
        })
        .then(response => response.json())
        .then(data => {
          console.log('Success:', data);
          mainReactionButton.innerText = reactionTypes.find(reaction => reaction.type === action).icon;
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    }
  </script>
</body>

</html>