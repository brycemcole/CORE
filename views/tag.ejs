<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>CORE/</title>
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/search.css" />
  <link rel="stylesheet" href="/css/company_profile.css" />

  <link rel="shortcut icon" href="/img/core.png" />
</head>
<style>
</style>

<body>
  <%- include('partials/navbar', { pagePath: 'updates' }) %>
  <main>
    <div class="tag-search-header">
      <h4>Tag Results for '<%= tag %>'</h4>
    </div>
    <% if (jobs.length > 0) { %>
    <%
    function getTintFromName(name) {
  let hash = 0;
  for (let i = 0; i < name.length; i++) {
    hash = name.charCodeAt(i) + ((hash << 5) - hash);
  }
  hash = hash & 0x00ffffff; // Ensure hash is within the range of 0x00ffffff

  // Convert hash to a hexadecimal string and pad with leading zeros
  const colorHex = ("00000" + hash.toString(16)).slice(-6);
  const tintColor = `#${colorHex}65`;

  // Blend with a desaturated base color (e.g., gray)
  const baseColor = "#808080"; // Light gray
  const blendedColor = blendColors(tintColor, baseColor, 0.5);
  return blendedColor;
}

function getTintFromNameSecondary(name) {
  let hash = 0;
  for (let i = 0; i < name.length; i++) {
    hash = name.charCodeAt(i) + ((hash << 5) - hash);
  }
  hash = hash & 0x00ffffff; // Ensure hash is within the range of 0x00ffffff

  // Convert hash to a hexadecimal string and pad with leading zeros
  const colorHex = ("00000" + hash.toString(16)).slice(-6);
  const tintColor = `#${colorHex}`;

  // Blend with a desaturated base color (e.g., gray)
  const baseColor = "#404040"; // Dark gray
  const blendedColor = blendColors(tintColor, baseColor, 0.5);
  return blendedColor;
}

function blendColors(color1, color2, ratio) {
  const r1 = parseInt(color1.slice(1, 3), 16);
  const g1 = parseInt(color1.slice(3, 5), 16);
  const b1 = parseInt(color1.slice(5, 7), 16);

  const r2 = parseInt(color2.slice(1, 3), 16);
  const g2 = parseInt(color2.slice(3, 5), 16);
  const b2 = parseInt(color2.slice(5, 7), 16);

  const r = Math.round(r1 * ratio + r2 * (1 - ratio));
  const g = Math.round(g1 * ratio + g2 * (1 - ratio));
  const b = Math.round(b1 * ratio + b2 * (1 - ratio));

  const blendedColor = `#${r.toString(16).padStart(2, "0")}${g
    .toString(16)
    .padStart(2, "0")}${b.toString(16).padStart(2, "0")}`;
  return blendedColor;
}%>
    <div class="jobs">
      <% jobs.forEach((job) => { %>
      <div class="job" onclick="window.location.href='/jobs/<%= job.id %>'">
        <div class="job-preview">
          <div class="job-info">
            <div class="company-info">
              <img class="thumbnail thumbnail-tiny" src="<%= job.company_logo %>" alt="<%= job.company_name %> logo" />
              <p class="company-name"><%= job.company_name %></p>
              <form id="favorite-form-<%= job.id %>" action="/favorites/jobs/<%= job.id %>" method="POST" style="margin-left: auto;">
                <button type="submit" style="margin-left:auto; background: 0; border:0;">
                  <span class="material-symbols-outlined" style="font-size:1.2rem;">star</span>
                </button>
              </form>
            </div>
            <h3 class="job-title">
              <%= job.title %>
              <span style="margin-left: auto; float: right;"><%= job.experienceLevel[0].toUpperCase() + job.experienceLevel.slice(1) %></span>
            </h3>
            <h5 class="job-subtitle secondary-text">
              <span style="margin-left: auto; float:right;">USD $<%= Math.floor((job.salary + job.salary_max) / 2 / 1000) %>k</span>
              <%= job.location %>
            </h5>
            <div class="job-main">
              <div class="job-description">
                <p class="job-description"><%= job.description %></p>
              </div>
              <div class="job-buttons">
                <button class="job-apply" id="submit-button-normal" style="padding: 5px 10px">Apply</button>
              </div>
            </div>
            <div class="job-posting-flairs">
              <% const tagsArray = job.tags && job.tags[1] ? job.tags[1].split(", ") : []; %>
              <% const maxTags = 3; %>
              <% const displayedTags = tagsArray.slice(0, maxTags); %>
              <% displayedTags.forEach((tag) => { %>
              <span class="job-flair" style="background-color: <%= getTintFromName(tag) %>9c; border: 1px solid <%= getTintFromName(tag) %>;">
                <p><%= tag %></p>
              </span>
              <% }); %>
              <% const remainingTags = tagsArray.length - maxTags; %>
              <% if (remainingTags > 0) { %>
              <span class="see-more">+<%= remainingTags %> more</span>
              <% } %>
            </div>
          </div>
        </div>
      </div>
      <% }); %>
    </div>
    <% } else { %>
    <p>No jobs found.</p>
    <% } %>
    <div class="load-more">
      <button class="load-more-btn" id="regular-button">Load More</button>
    </div>
  </main>
</body>

</html>