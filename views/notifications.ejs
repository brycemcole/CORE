<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/communities.css" />
  <link rel="stylesheet" href="/css/com-btn-container.css" />
  <link rel="stylesheet" href="/css/notifications.css" />

  <link rel="shortcut icon" href="/img/core.png" />
  <title>CORE/Notifications</title>
</head>

<body>
  <%- include('partials/navbar', { pagePath: 'notifications', user: user }) %>
  <main>
    <%- include('partials/com-btn-container', { }) %>
    <div class="container">
      <div id="notification-list" class="column">
      </div>
    </div>
    <%- include('partials/footer') %>

  </main>

  <script>
    function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + ' minutes ago';
      } else if (hours < 24) {
        formattedDate = hours + ' hours ago';
      } else if (days < 365) {
        formattedDate = days + ' days ago';
      } else {
        formattedDate = years + ' years ago';
      }
      return formattedDate;
    }

    <% if (user) { %>

    async function fetchNotifications(type = 'all') {
      // Fetch notifications based on the specified type
      const response = await fetch(`/notifications/${type}/<%= user.id %>`);
      const notifications = await response.json();
      let notificationBtn = document.getElementById('notification-btn');

      const notificationList = document.getElementById('notification-list');
      notificationList.innerHTML = ''; // Clear previous notifications

      // Populate list
      notifications.forEach(notification => {
        const li = document.createElement('li');
        li.classList.add('notification-item');
        if (notification.isRead) {
          li.classList.add('read');
        } else {
          li.classList.add('unread');
        }
        const notificationDiv = document.createElement('div');
        const notificationIsReadIndicator = document.createElement('div');
        notificationIsReadIndicator.classList.add('notification-is-read-indicator');
        if (notification.isRead) {
          notificationIsReadIndicator.classList.add('read');
        } else {
          notificationIsReadIndicator.classList.add('unread');
          notificationIsReadIndicator.style.backgroundColor = notification.senderProfileColor || '#000000';
          li.style.backgroundColor = notification.senderProfileColor + "15";
        }
        notificationDiv.appendChild(notificationIsReadIndicator);
        const notificationSenderAvatar = document.createElement('img');
        notificationSenderAvatar.src = notification.senderProfilePicture || '/img/default-avatar.png';
        notificationSenderAvatar.classList.add('notification-sender-avatar');
        notificationDiv.appendChild(notificationSenderAvatar);
        const notificationHeader = document.createElement('span');
        const notificationText = document.createElement('span');
        notificationTextDiv = document.createElement('div');
        notificationTextDiv.classList.add('notification-text-div');
        notificationHeader.classList.add('notification-header');
        notificationText.classList.add('notification-text');

        if (notification.type === 'NEW_COMMENT') {
          notificationHeader.textContent = 'New Comment';
          notificationText.textContent = `${notification.senderUsername} commented on your post`;
          notificationDiv.onclick = async function() {
            await fetch(`/notifications/markAsRead/${notification.id}`, {
              method: 'PUT'
            });
            li.classList.add('read');
            li.classList.remove('unread');
            notificationIsReadIndicator.classList.add('read');
            notificationIsReadIndicator.classList.remove('unread');
            if (notification.type === 'NEW_COMMENT' || notification.type === ['like', 'love', 'celebrate', 'curious', 'boost']) {
              window.location.href = "/posts/" + notification.postId;
            } else if (notification.type === 'follow') {
              window.location.href = "/user/" + notification.senderUsername;
            }
          };
        } else if (notification.type === ['like', 'love', 'celebrate', 'curious', 'boost']) {
          notificationHeader.textContent = 'New Reaction';
          notificationText.textContent = `${notification.senderUsername} liked your post`;
          notificationDiv.onclick = async function() {
            await fetch(`/notifications/markAsRead/${notification.id}`, {
              method: 'PUT'
            });
            li.classList.add('read');
            li.classList.remove('unread');
            notificationIsReadIndicator.classList.add('read');
            notificationIsReadIndicator.classList.remove('unread');
            if (notification.type === 'NEW_COMMENT' || notification.type === ['like', 'love', 'celebrate', 'curious', 'boost']) {
              window.location.href = "/posts/" + notification.postId;
            } else if (notification.type === 'follow') {
              window.location.href = "/user/" + notification.senderUsername;
            }
          };
        } else if (notification.type === 'follow') {
          notificationHeader.textContent = 'New Follower';
          notificationText.textContent = `${notification.senderUsername} followed you`;
          notificationDiv.onclick = async function() {
            await fetch(`/notifications/markAsRead/${notification.id}`, {
              method: 'PUT'
            });
            li.classList.add('read');
            li.classList.remove('unread');
            notificationIsReadIndicator.classList.add('read');
            notificationIsReadIndicator.classList.remove('unread');
            if (notification.type === 'NEW_COMMENT' || notification.type === ['like', 'love', 'celebrate', 'curious', 'boost']) {
              window.location.href = "/posts/" + notification.postId;
            } else if (notification.type === 'follow') {
              window.location.href = "/user/" + notification.senderUsername;
            }
          };
        }
        notificationTextDiv.appendChild(notificationHeader);
        notificationTextDiv.appendChild(notificationText);

        const flairs = document.createElement('div');
        flairs.classList.add('flairs');

        const notificationTime = document.createElement('span');
        notificationTime.classList.add('time-flair');
        notificationTime.textContent = formatDate(notification.createdAt);
        flairs.appendChild(notificationTime);
        notificationTextDiv.appendChild(flairs);
        notificationDiv.appendChild(notificationTextDiv);
        const clearBtn = document.createElement('button');
        clearBtn.classList.add('clear-btn');
        const clearIcon = document.createElement('span');
        clearIcon.classList.add('material-symbols-outlined');
        clearIcon.textContent = 'clear';
        clearBtn.appendChild(clearIcon);
        clearBtn.onclick = async function() {
          event.stopPropagation();
          await fetch(`/notifications/${notification.id}`, {
            method: 'DELETE'
          });
          li.remove();
        };
        notificationDiv.appendChild(clearBtn);
        li.appendChild(notificationDiv);

        notificationList.appendChild(li); // Append the notification element to the list
      });
    }
    fetchNotifications();
    <% } %>
  </script>
</body>

</html>