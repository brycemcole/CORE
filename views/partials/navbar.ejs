<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<nav class="navbar">
  <div class="nav-bar">
    <div class="logo">
      <div class="logo-img">
        <a href="/"> <img src="/img/core.png" alt="CORE" /> </a>
      </div>
      <div class="nav-text-and-user-btns">
        <div class="nav-text-container">
          <% 

    function getTintFromName(name) {
      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 18) - hash);
      }
      const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
      const tintColor = `#${color}95`; 
      return tintColor;
    }
    let navText = 'â€Ž ';
    let user = locals.user; 
    let communityId = locals.communityId;
    let postUser = locals.post && locals.post.user && locals.post.user.username ? locals.post.user.username : null;
    let otherUser = locals.otheruser;
    

                let navbarTint = '';
            if (locals.community) {
              navbarTint = locals.community.community_color;
            }

    %>
          <%- navText %>
        </div>

        <div class="nav-btns">
          <ul class="nav-links">
            <li>
              <a href="/" class="navbar-button <%= currentPath === '/' ? 'active' : '' %>">
                Community
              </a>
            </li>
            <li>
              <a href="/jobs" class="navbar-button <%= currentPath === '/jobs' ? 'active' : '' %>">Openings</a>
            </li>
            <% if (user) { %>
            <li>
              <a href="/learning" class="navbar-button <%= currentPath === '/learning' ? 'active' : '' %>">
                Learning</a>
            </li>
            <% } %>
            <li>
              <a href="/updates" class="navbar-button <%= currentPath === '/updates' ? 'active' : '' %>">
                Updates</a>
            </li>

          </ul>
        </div>
      </div>

    </div>
    <div class="top-bar">
      <div class="hamburger-menu">

        <div class="menu-wrapper">
          <button id="menu-button" class="menu-button">
            <div class="menu-bar top-bar"></div>
            <div class="menu-bar middle-bar"></div>
            <div class="menu-bar bottom-bar"></div>
          </button>
        </div>
        <div class="menu-content" id="menu-content">
          <a href="/">
            <div class="menu-item">
              <span class="material-symbols-outlined" id="menu-community-icon">
                home
              </span>
              Home
            </div>
          </a>

          <a href="/jobs">
            <div class="menu-item">
              <span class="material-symbols-outlined" id="menu-community-icon">
                work
              </span>
              Openings
            </div>
          </a>
          <a href="/c">
            <div class="menu-item">
              <span class="material-symbols-outlined" id="menu-community-icon">
                group
              </span>
              Communities

            </div>
          </a>
          <a href="/updates">
            <div class="menu-item">
              <span class="material-symbols-outlined" id="menu-community-icon">
                settings
              </span>
              Updates

            </div>
          </a>
          <% if (user) { %>
          <form id="logoutForm" action="/logout?_method=DELETE" method="POST" style="display: none"></form>
          <a href="/favorites">
            <div class="menu-item">
              <span class="material-symbols-outlined" id="menu-community-icon">
                star
              </span>
              Favorites
            </div>
          </a>
          <% } %>
          <h3>Trending Posts</h3>
          <div class="mobile-trending-posts">
          </div>
        </div>

        <div id="overlay"></div>
      </div>
      <div class="user-btns">
        <ul class="user-links">
          <li>
            <div class="search-container">
              <form id="searchForm" class="search-form" action="/search" method="get" style="display: none;">
                <input type="text" name="searchTerm" placeholder="Search..." class="search-input">
                <div class="search-results-container" style="display: none;"></div>

                <button type="submit" class="search-btn">
                  <span class="material-symbols-outlined" id="nb-icon">search</span>
                </button>
              </form>
              <div class="overlay" style="display:none;"></div> <!-- Overlay element -->

              <button id="expandSearch" class="search-button">
                <span class="material-symbols-outlined" id="nb-icon">search</span>
              </button>
            </div>
          </li>

        </ul>
        <ul class="user-links" style="margin-right: -12px;">
          <li>
            <% if (user && user.avatar) { %>
            <div class="nav-avatar">
              <img src="<%= user.avatar %>" alt="Avatar" class="user-avatar" id="user-avatar">

              <div class="avatar-dropdown">

                <% if (user) { %>

                <a href="/notifications">
                  <div class="avatar-dropdown-item">
                    <span class="material-symbols-outlined" id="nb-icon">
                      notifications
                    </span>
                    <span id="unreadCount" class="count-bubble"></span>
                  </div>
                </a>
                <% } %>

                <a href="/u/<%= user.username %>">
                  <div class="avatar-dropdown-item">
                    <span class="material-symbols-outlined" id="nb-icon">
                      person
                    </span>
                  </div>
                </a>
                <a href="/favorites">
                  <div class="avatar-dropdown-item">
                    <span class="material-symbols-outlined" id="nb-icon">
                      star
                    </span>
                  </div>
                </a>
                <a href="#" onclick="document.getElementById('logoutForm').submit()">
                  <div class="avatar-dropdown-item">
                    <span class="material-symbols-outlined" id="nb-icon">
                      logout
                    </span>
                  </div>
                </a>
              </div>
            </div>
            <% } else if (user && !user.avatar) { %>
            <div class="nav-avatar">
              <a href="/u/<%= user.username %>" class="inbox-button">
                <span class="material-symbols-outlined" id="nb-icon">
                  person
                </span>
              </a>
            </div>
            <% } else if (!user) { %>
            <div class="nav-avatar">
              <a href=" /login" class="inbox-button">
                <span class="material-symbols-outlined" id="nb-icon">
                  person
                </span>
              </a>
            </div>
            <% } %>
            </a>
          </li>
          <ul>
      </div>
    </div>
  </div>
  <div class="second-nav-bar">
    <div class="second-nav-btns">
      <ul class="second-nav-links">
        <li class="dropdown"> <a href="#" class="navbar-button dropdown-toggle <%= currentPath === '/' || currentPath.startsWith('/posts/') || currentPath === '/jobs' || currentPath.startsWith('/jobs/') || currentPath === '/learning' || currentPath === '/updates' ? 'active' : '' %>"> <% if (currentPath === '/' || currentPath.startsWith('/posts/')) { %>
            <% if (typeof post !== 'undefined') { %>

            <span class="material-symbols-outlined" id="second-nav-icon">
              group
            </span>
            <u>Community</u> / <%= post.community.shortname %> / <%= post.title %>
            <% } else { %>
            <span class="material-symbols-outlined" id="second-nav-icon">
              group
            </span>
            <u>Community</u>
            <% } %>
            <% } else if (currentPath === '/jobs' || currentPath.startsWith('/jobs/')) { %>
            <% if (typeof job !== 'undefined') { %>
            <span class="material-symbols-outlined" id="second-nav-icon">
              factory
            </span>
            <u>Openings</u> > <%= job.title %>
            <% } else { %>
            <span class="material-symbols-outlined" id="second-nav-icon">
              factory
            </span>
            <u>Openings</u>
            <% } %>
            <% } else if (currentPath === '/learning') { %>
            <span class="material-symbols-outlined" id="second-nav-icon">
              book
            </span>
            <u>Learning</u>
            <% } else if (currentPath === '/updates') { %>
            <span class="material-symbols-outlined" id="second-nav-icon">
              settings
            </span>
            <u>Updates</u>
            <% } %>
            <span class="material-symbols-outlined" id="second-nav-icon">
              arrow_drop_down
            </span>
          </a>
          <ul class="dropdown-menu">
            <li>
              <a href="/">
                <span class="material-symbols-outlined" id="second-nav-icon">
                  group
                </span>
                Community</a>
            </li>
            <li><a href="/jobs">
                <span class="material-symbols-outlined" id="second-nav-icon" style="margin-right: auto">
                  factory
                </span>
                Openings</a></li>
            <% if (user) { %>
            <li><a href="/learning">
                <span class="material-symbols-outlined" id="second-nav-icon">
                  book
                </span>Learning</a></li>
            <% } %> <li>
              <a href="/updates">
                <span class="material-symbols-outlined" id="second-nav-icon">
                  settings
                </span>Updates</a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </div>

  <div class="latest-commit-banner" id="latestCommitBanner" style="display: none;">
    <div class="latest-commit-info">
      <div class="latest-commit-main">
        <span class="latest-commit-message"></span>
        <span class="latest-commit-date"></span>
      </div>
      <button id="closeCommitBanner">
        <span class="material-symbols-outlined">close</span>
      </button>
    </div>
  </div>
</nav>
<style>
  <% if (navbarTint) {
    %>.navbar {
      border-color: <%=navbarTint %>;
    }

    .second-nav-bar {
      border-color: <%=navbarTint %>;
    }

    .comm-short-title {
      color: <%=navbarTint %> !important;
    }

    .tag-flair {
      background-color: <%=navbarTint %> !important;
      border: 1px solid <%=navbarTint %>20 !important;

    }

    #community-header-text:hover {
      color: <%=navbarTint %> !important;
    }

    .nested-comment {
      border-color: <%=navbarTint %> !important;
    }

    <%
  }

  %>
</style>


<script>
  function getTrendingPosts() {
    fetch('/api/trending-posts') // Adjust this to your server's endpoint
      .then(response => response.json())
      .then(posts => {
        const isMobile = window.matchMedia("only screen and (max-width: 768px)").matches;
        let trendingPostsContainer;
        if (!isMobile) {
          trendingPostsContainer = document.querySelector('.trending-posts');
        } else {
          trendingPostsContainer = document.querySelector('.mobile-trending-posts');
        }
        trendingPostsContainer.innerHTML = ''; // Clear existing posts

        posts.forEach(trending_post => {
          const postElement = document.createElement('div');
          postElement.className = 'trending-post';
          postElement.onclick = () => {
            window.location.href = `/posts/${trending_post.id}`;
          };

          // Add content to postElement here. Example:
          postElement.innerHTML = `
                <div class="trending-info">
                  ${trending_post.views}
                <span class="material-symbols-outlined" style="color: var(--active-indicator-color);">
      visibility
      </span> 
      </div>
                <div class="trending-post-content">
                  <div class="trending-post-user-info">
                    <p><strong>${trending_post.username}</strong> in /${trending_post.community_name}</p>
                    </div>
                                        <div><p>${trending_post.title} </p> </div>

                </div>

            `;

          trendingPostsContainer.appendChild(postElement);
        });
      })
      .catch(error => console.error('Error fetching trending posts:', error));
  }

  function getAllCommunities() {
    fetch('/api/communities') // Adjust this to your server's endpoint
      .then(response => response.json())
      .then(communities => {
        // Use window.matchMedia to check for mobile devices
        const isMobile = window.matchMedia("only screen and (max-width: 768px)").matches;
        // Select the container based on whether or not it is a mobile device
        const containerClassName = isMobile ? '.community-selector' : '.communities-container';
        const communitiesContainer = document.querySelector(containerClassName);

        if (communitiesContainer) {
          communitiesContainer.innerHTML = ''; // Clear existing communities
          communities.forEach(community => {
            if (community.is_member) {

              const communityElement = document.createElement('div');
              communityElement.className = 'communities active';
              communityElement.onclick = () => {
                window.location.href = `/c/${community.shortname}`;
              };


              const tint = community.community_color;

              communityElement.innerHTML = `
                <span class="material-symbols-outlined" style="${isMobile ? `color: ${tint};` : ''}">
                  ${community.mini_icon}
                </span>
                <div class="community-name">
                  <p class="community-text" style="color: inherit;">${isMobile ? community.shortname : community.name}</p>
                </div>
              `;

              communityElement.style.setProperty('--tint-color', tint);

              communitiesContainer.appendChild(communityElement);
            }
          });
          communities.forEach(community => {
            if (!community.is_member) {

              const communityElement = document.createElement('div');
              communityElement.className = 'communities';
              communityElement.onclick = () => {
                window.location.href = `/c/${community.shortname}`;
              };

              const tint = community.community_color;

              communityElement.innerHTML = `
                <span class="material-symbols-outlined" style="${isMobile ? `color: ${tint};` : ''}">
                  ${community.mini_icon}
                </span>
                <div class="community-name">
                  <p class="community-text" style="color: inherit;">${isMobile ? community.shortname : community.name}</p>
                </div>
              `;

              communityElement.style.setProperty('--tint-color', tint);

              communitiesContainer.appendChild(communityElement);
            }
          });
        }
      })
      .catch(error => console.error('Error fetching communities:', error));
  }

  function getTintFromName(name) {
    let hash = 0;
    for (let i = 0; i < name.length; i++) {
      hash = name.charCodeAt(i) + ((hash << 18) - hash);
    }
    const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
    const tintColor = `#${color}95`;
    return tintColor;
  }

  getAllCommunities();
  getTrendingPosts();
  document.addEventListener('DOMContentLoaded', function() {
    const banner = document.getElementById('latestCommitBanner');
    const closeButton = document.getElementById('closeCommitBanner');


    function createHashFromString(string) {
      var hash = 0,
        i, chr;
      if (string.length === 0) return hash;
      for (i = 0; i < string.length; i++) {
        chr = string.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
      }
      return hash;
    }

    function fetchLatestCommit() {
      fetch('/api/get-latest-commit')
        .then(response => response.json())
        .then(data => {
          const commitMessage = data.message;
          const commitHash = createHashFromString(commitMessage);
          const storedHash = localStorage.getItem('commitBannerClosed');

          if (storedHash !== String(commitHash)) {
            const commitAuthor = data.author;
            const commitDate = new Date(data.date).toLocaleString();
            document.querySelector('.latest-commit-message').textContent = commitMessage + ' by ' + commitAuthor;
            document.querySelector('.latest-commit-date').textContent = "Updated at: " + commitDate.split(',')[0] + ' ' + commitDate.split(',')[1];
            banner.style.display = 'block';
          } else {
            banner.style.display = 'none';
          }
        })
        .catch(error => {
          console.error('Error fetching latest commit:', error);
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
      const dropdownToggle = document.querySelector('.dropdown-toggle');
      const dropdownMenu = document.querySelector('.dropdown-menu');

      dropdownToggle.addEventListener('click', function(event) {
        event.preventDefault();
        dropdownMenu.classList.toggle('show');
      });
    });

    // Function to close the banner and store the state in localStorage
    function closeBanner() {
      banner.style.display = 'none';
      // Get the commit message again to create a hash
      const commitMessage = document.querySelector('.latest-commit-message').textContent;
      const commitHash = createHashFromString(commitMessage.split(' by ')[0]); // Assuming commit message is before ' by '
      localStorage.setItem('commitBannerClosed', String(commitHash));
    }

    // Event listener for the close button
    closeButton.addEventListener('click', closeBanner);

    // Fetch the latest commit information on page load
    fetchLatestCommit();
  });

  document.addEventListener('DOMContentLoaded', async () => {
    <% if (user) { %>
    const userId = '<%- user.id %>';
    const response = await fetch(`/notifications/${userId}/unread-count`);
    const data = await response.json();
    const unreadCount = data.count;

    const unreadCountElement = document.getElementById('unreadCount');
    if (unreadCount > 0) {
      unreadCountElement.textContent = unreadCount;
      unreadCountElement.style.display = 'inline-block';
    } else {
      unreadCountElement.style.display = 'none';
    }
    <% } %>
  });
  document.addEventListener('DOMContentLoaded', function() {
    const expandSearchBtn = document.getElementById('expandSearch');
    const searchForm = document.getElementById('searchForm');
    const searchInput = document.querySelector('.search-input');
    const overlay = document.querySelector('.overlay'); // Get the overlay element
    const searchResultsContainer = document.querySelector('.search-results-container');

    expandSearchBtn.addEventListener('click', function() {
      searchForm.style.display = 'flex'; // Show the form
      overlay.style.display = 'block'; // Show the overlay
      expandSearchBtn.style.display = 'none'; // Hide the search icon
      searchInput.focus(); // Focus on the input field immediately
    });

    overlay.addEventListener('click', function() {
      searchForm.style.display = 'none'; // Hide the form
      overlay.style.display = 'none'; // Hide the overlay
      expandSearchBtn.style.display = 'block'; // Show the search icon again
    });

    // Optional: Close search when pressing ESC
    document.addEventListener('keydown', function(event) {
      if (event.key === "Escape") {
        searchForm.style.display = 'none'; // Hide the form
        overlay.style.display = 'none'; // Hide the overlay
        expandSearchBtn.style.display = 'block'; // Show the search icon again
      }
    });

    searchInput.addEventListener('input', function() {
      const query = this.value;
      if (query.length > 2) { // Trigger search after at least 3 characters
        // Note: Replace '/search/' with the correct path if your application is under a different root
        fetch(`/search/preview/?searchTerm=${encodeURIComponent(query)}`)
          .then(response => response.json())
          .then(data => {
            displaySearchResults(data); // Implement this function based on how you want to display your results
          })
          .catch(error => {
            console.error('Error fetching search results:', error);
          });
      } else {
        searchResultsContainer.style.display = 'none';
      }
    });

    function displaySearchResults(results) {
      // Clear previous results
      searchResultsContainer.innerHTML = '';
      // Check if there are any results
      if (results.posts.length > 0 || results.users.length > 0 || results.jobs.length > 0) {
        // Check and append post result items if available
        if (results.posts.length > 0) {
          const postsHeading = document.createElement('h3');
          postsHeading.textContent = 'Posts';
          searchResultsContainer.appendChild(postsHeading);

          results.posts.forEach(post => {
            const postItem = document.createElement('div');
            postItem.onclick = function() {
              window.location.href = `/posts/${post.id}`;
            };
            postItem.textContent = `${post.post_type} - ${post.title}`; // Label each result as 'Post'
            searchResultsContainer.appendChild(postItem);
          });
        }

        // Check and append user result items if available
        if (results.users.length > 0) {
          const usersHeading = document.createElement('h3');
          usersHeading.textContent = 'Users';
          searchResultsContainer.appendChild(usersHeading);

          results.users.forEach(user => {
            const userItem = document.createElement('div');
            userItem.onclick = function() {
              window.location.href = `/u/${user.username}`;
            };
            const userImage = document.createElement('img');

            userImage.src = user.avatar ? user.avatar : '/img/default-avatar.png'; // Set the image source to the user's profile picture URL or default picture
            userImage.alt = `${user.username}'s profile picture`; // Set the alt text
            userImage.style.width = '24px'; // Set the width of the image
            userImage.style.height = '24px'; // Set the height of the image
            userImage.style.borderRadius = '100%'; // Make the image round

            userItem.innerHTML = `${user.firstname} ${user.lastname} (${user.username})`; // Label each result as 'User'
            userItem.appendChild(userImage); // Append the image to the user item
            searchResultsContainer.appendChild(userItem);
          });
        }

        // Check and append job result items if available
        if (results.jobs.length > 0) {
          const jobsHeading = document.createElement('h3');
          jobsHeading.textContent = 'Jobs';
          searchResultsContainer.appendChild(jobsHeading);

          results.jobs.forEach(job => {
            const jobItem = document.createElement('div');
            jobItem.onclick = function() {
              window.location.href = `/jobs/${job.id}`;
            };
            jobItem.textContent = `${job.title}`; // Label each result as 'Job'
            searchResultsContainer.appendChild(jobItem);
          });
        }

        searchResultsContainer.style.display = 'block';
      } else {
        searchResultsContainer.style.display = 'none';
      }
    }


  });



  <% if (user) { %>

  const userAvatar = document.getElementById('user-avatar');
  const avatarDropdown = document.querySelector('.avatar-dropdown');
  const userLinks = document.querySelector('.user-links');
  const userText = document.querySelector('.nav-text-container');

  userAvatar.addEventListener('click', () => {
    avatarDropdown.classList.toggle('open');
    userLinks.classList.toggle('slide-left');
    userText.classList.toggle('hidden');
  });

  <% } %>

  document.addEventListener('click', function(event) {
    var content = document.getElementById("menu-content");
    var overlay = document.getElementById("overlay");
    var menuButton = document.getElementById("menu-button"); // Ensure this is the same ID as your menu button
    var menuIcon = document.getElementById("menu-icon"); // Assuming you have an element with this ID for additional icons or text

    // If clicking outside content and not on the menuIcon, close the sidebar and overlay if they are open
    if (!content.contains(event.target) && event.target !== menuIcon && !menuButton.contains(event.target)) { // Added check for menuButton
      if (content.classList.contains("sidebar-open")) {
        content.classList.remove("sidebar-open");
        overlay.style.opacity = '0';
        setTimeout(() => {
          overlay.style.pointerEvents = 'none'; // Block clicks when the overlay is fully transparent
        }, 500);
        if (menuButton.classList.contains('active')) { // Check if menu is active then toggle
          menuButton.classList.toggle('active');
        }
        document.body.style.overflow = ""; // Re-enable scrolling
      }
    } else if (event.target === menuButton || menuButton.contains(event.target)) { // If clicking on the menuButton
      menuButton.classList.toggle('active');
      content.classList.toggle("sidebar-open");
      if (content.classList.contains("sidebar-open")) {
        overlay.style.opacity = '1';
        overlay.style.pointerEvents = 'auto';
        document.body.style.overflow = "hidden"; // Disable scrolling when sidebar is open
      } else {
        overlay.style.opacity = '0';
        setTimeout(() => {
          overlay.style.pointerEvents = 'none';
        }, 500);
        document.body.style.overflow = ""; // Re-enable scrolling when sidebar is closed
      }
    }
  });
</script>