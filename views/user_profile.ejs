<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/user_profile.css" />
  <link rel="shortcut icon" href="/img/core.png" />
  <title>CORE/<%= otheruser.username %></title>
</head>

<style>
  .link-display {
    background: <%=otheruser.profile_border_color%>52 !important;
  }

  .navbar,
  .second-nav-bar {
    border-color: <%=otheruser.profile_border_color%> !important;
  }
</style>

<body>
  <%- include('partials/navbar', { pagePath: 'communities' }) %>
  <main>
    <div class="main-container">
      <div id="profile" class="grid-container">

        <div class="profile-info">
          <div class="profile-picture" data-hue-rotate="0">
            <% if (otheruser.avatar) { %>
            <img id="profilePic" src="<%= otheruser.avatar %>" alt="Profile Picture" style="  box-shadow: 0 2px 20px <%= otheruser.profile_border_color%>;
  border: 4px solid <%= otheruser.profile_border_color%> !important;" />
            <% } else { %>
            <img src="/img/default-avatar.png" alt="Avatar" class="avatar" />
            <% } %>
          </div>
          <div class="profile-details">
            <h2><%= otheruser.firstname %> <%= otheruser.lastname%></h2>
            <p id="firstname-display"> @<%= otheruser.username %></p>
            <div class="followers-info">
              <div class="link-display">
                <a href="/user/<%= otheruser.username %>/followers" style="display: flex; flex-direction:row;">Followers: <span id="followerCount"> <%= otheruser.followerCount %> </a></span>
              </div>
              <div class="link-display">
                <a href="/user/<%= otheruser.username %>/following" style="display: flex; flex-direction:row;">Following: <span id="followCount"> <%= otheruser.followingCount %></a></span>
              </div>
            </div>
          </div>
          <% if (user) { %>
          <div class="edit-controls-and-follow-button">
            <% if (otheruser.username === user.username) { %>
            <button id="edit-button" onclick="window.location.href='/edit-profile'" style="margin-bottom: auto;">
              <span class="material-symbols-outlined">more_horiz</span>
            </button>
            <% } else { %>
            <form id="followForm" action="/users/<%= otheruser.id %>/<%= isFollowing ? 'unfollow' : 'follow' %>" method="POST">
              <button type="submit" id="followButton" style="margin-bottom: auto;"><%= isFollowing ? 'Unfollow' : 'Follow' %></button>
            </form>
            <% } %>
          </div>
          <% } %>

        </div>

        <div class="user-bio" style="background: 0 !important; padding-top: 0;">
          <p>
            <%= otheruser.bio %>
          </p>
        </div>

        <div class="current-job" style="background:<%= otheruser.profile_border_color%>52 !important;">
          <% if (otheruser.currentJob && otheruser.currentCompany) {%>
          <h5> <%= otheruser.currentCompany %>
          </h5>
          <h4>
            <%= otheruser.currentJob%>
          </h4>
          <p>
            Started: <%= new Date(otheruser.currentJob_begindate).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: '2-digit' }) %>
          </p>



          <% } else { %>
          <p id="currentjob.company-display"></p>
          <% if (user && otheruser.username == user.username) { %>
          Add Company
          </button>
          <% } %> <% } %>
          <% if (otheruser.currentjob &&
          otheruser.currentjob.position) { %>
          <p id="currentjob.position-display">
            <strong>Position:</strong> <%= otheruser.currentjob.position %>
          </p>
          <% } else { %>
          <% } %>
        </div>

        <div class="user-links" style="background:<%= otheruser.profile_border_color%>52 !important;">
          <div class="social-display"> <img src="/src/github.png" style="height:20px;width:20px;">
            <p id="github-url-display"> <% if (otheruser.github_url) { %> <a href="https://github.com/<%= otheruser.github_url %>"><%= otheruser.github_url %></a> <% } else { %> No Github URL yet. <% } %> </p>
          </div>
          <div class="social-display"> <img src="/src/leetcodeglyph.png" style="height:20px;width:20px;">
            <p id="leetcode-url-display"> <% if (otheruser.leetcode_url) { %> <a href="https://leetcode.com/<%= otheruser.leetcode_url %>"><%= otheruser.leetcode_url %></a> <% } else { %> No LeetCode URL yet. <% } %> </p>
          </div>
          <div class="social-display"> <img src="/src/linkedin.png" style="height:20px;width:20px;">
            <p id="linkedin-url-display"> <% if (otheruser.linkedin_url) { %> <a href="https://www.linkedin.com/in/<%= otheruser.linkedin_url %>"><%= otheruser.linkedin_url %></a> <% } else { %> No LinkedIn URL yet. <% } %> </p>
          </div>
        </div>
        <div class="github-commit-graph">
          <h5>GitHub Activity</h5>
          <div id="commit-graph-container"></div>
        </div>
        <div class="github-commit-repos" style="background:<%= otheruser.profile_border_color%>52 !important;">
          <h5>GitHub Repositories</h5>
          <table id="repo-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Stars</th>
                <th>Language</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>

        <div class="user-activity">
          <div class="user-activity-header">
            <div class="user-activity-title">
              <h4><%=otheruser.username%>'s activity</h4>
            </div>
            <div class="user-activity-buttons">
              <button class="sort-option posts-button active" onclick="showSection('posts')">Posts</button>
              <button class="sort-option comments-button" onclick="showSection('comments')">Comments</button>
            </div>
          </div>
          <%
                function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + ' minutes ago';
      } else if (hours < 24) {
        formattedDate = hours + ' hours ago';
      } else if (days < 365) {
        formattedDate = days + ' days ago';
      } else {
        formattedDate = years + ' years ago';
      }
      return formattedDate;
    }

%>
          <div id="posts" class="content">
            <% if (posts.length === 0) { %>
            <p>No posts yet.</p>
            <% } else { %>
            <div class="post-container">
              <% posts.forEach(function(post) { %>
              <div class="post" onclick="window.location.href='/posts/<%= post.id %>'" style="background:<%= otheruser.profile_border_color%>52 !important;">
                <h5 class="post-title">
                  <%= post.title %>
                </h5>
                <h5>
                  <%= post.communities_id %>
                </h5>
                <p class="post-content" style="font-size: 14px;"><%= post.content %></p>
                <div class="post-info">
                  <span class="link-display">
                    <p>
                      <%= formatDate(post.created_at) %>
                    </p>
                  </span>
                  <span class="link-display">
                    <p>
                      <%= post.views%> views
                    </p>
                  </span class="link-display">

                  <span class="link-display">
                    <p>
                      <%= post.comment_count %> comments
                    </p>
                  </span>
                  <span class="link-display">
                    <p>
                      <%= post.reaction_count %> reactions
                    </p>
                  </span>
                </div>
              </div>
              <% }); %>
            </div>
            <% } %>
          </div>

          <div id="comments" class="content" style="display:none;">
            <% if (comments.length === 0) { %>
            <p>No comments yet.</p>
            <% } else { %>
            <div class="comments-container">
              <% comments.forEach(function(comment) { %>
              <div class="com" onclick="window.location.href='/posts/<%= comment.post_id %>'">
                <div class="comment-header">
                  <img class="comment-author-avatar" src="<%= comment.author.avatar %>" alt="Avatar" />
                  <p class="comment-author">

                    <a href="/user/<%= comment.author.username %>"><%= comment.author.username %></a> <% if (comment.receiver) { %> to <a href="/user/<%= comment.receiver %>"><%= comment.receiver %></a> <% } %>
                  </p>
                </div>
                <div class="comment" style="background:<%= otheruser.profile_border_color%>52 !important;">
                  <h5 class="comment-title">
                    <%= comment.title %>
                  </h5>
                  <p class="comment-content"><%= comment.comment %></p>
                  <div class="comment-info">
                    <span>
                      <p>
                        <%= formatDate(comment.created_at) %>
                      </p>
                    </span>
                  </div>
                </div>
              </div>
              <% }); %>
            </div>
            <% } %>
          </div>
        </div>
      </div>
  </main>
  <script>
    async function fetchRepositories() {
      const username = '<%= otheruser.github_url %>';
      const response = await fetch(`/api/github-repos/${username}`);
      const data = await response.json();

      if (response.ok) {
        displayRepositories(data.repositories);
      } else {
        console.error('Failed to fetch repositories:', data.error);
        // Display an error message to the user
      }
    }

    function displayRepositories(repositories) {
      const tableBody = document.querySelector('#repo-table tbody');

      repositories.forEach(repo => {
        const row = document.createElement('tr');

        const nameCell = document.createElement('td');
        const nameLink = document.createElement('a');
        nameLink.href = repo.url;
        nameLink.textContent = repo.name;
        nameCell.appendChild(nameLink);
        row.appendChild(nameCell);

        const starsCell = document.createElement('td');
        starsCell.textContent = repo.stars;
        row.appendChild(starsCell);

        const languageCell = document.createElement('td');
        languageCell.textContent = repo.language || '';
        row.appendChild(languageCell);

        tableBody.appendChild(row);
      });

      if (repositories.length === 0) {
        const tableHead = document.querySelector('#repo-table thead');

        const row = document.createElement('tr');
        const cell = document.createElement('td');
        tableHead.style.display = 'none';
        cell.setAttribute('colspan', '4');
        cell.textContent = 'No public repositories found.';
        row.appendChild(cell);
        tableBody.appendChild(row);
      }
    }

    async function fetchCommitGraph() {
      const git_username = '<%= otheruser.github_url %>';
      const response = await fetch(`/api/github-commit-graph/${git_username}`);
      const data = await response.json();

      if (response.ok) {
        displayCommitGraph(data.commitGraph);
      } else {
        console.error('Failed to fetch commit graph:', data.error);
        // Display an error message to the user
      }
    }

    function displayCommitGraph(commitGraph) {
      const container = document.getElementById('commit-graph-container');
      // Create a container element for the commit graph
      const graphContainer = document.createElement('div');
      graphContainer.classList.add('commit-graph');

      // Get the dates from the commitGraph keys
      const dates = Object.keys(commitGraph);
      // Sort the dates in descending order (most recent first)
      dates.sort((a, b) => new Date(b) - new Date(a));

      // Find the start and end dates
      const startDate = new Date(dates[0]);
      const endDate = new Date(dates[dates.length - 1]);

      // Calculate the number of weeks between start and end dates
      const weeksDiff = Math.ceil((startDate - endDate) / (7 * 24 * 60 * 60 * 1000));

      // Create a div for each day of the week (7 rows)
      for (let i = 0; i < 7; i++) {
        const rowDiv = document.createElement('div');
        rowDiv.classList.add('commit-row');

        // Create a div for each week of commit data (number of weeks columns)
        for (let j = 0; j < weeksDiff; j++) {
          const date = new Date(startDate);
          date.setDate(startDate.getDate() - j * 7 - i);
          const dateString = date.toISOString().split('T')[0];
          const count = commitGraph[dateString] || 0;

          const cellDiv = document.createElement('div');
          cellDiv.classList.add('commit-cell');
          cellDiv.setAttribute('data-date', dateString);
          cellDiv.setAttribute('data-count', count);

          // Set the background color based on the commit count
          const color = getColorForCommitCount(count);
          cellDiv.style.backgroundColor = color;

          rowDiv.appendChild(cellDiv);
        }

        graphContainer.appendChild(rowDiv);
      }

      container.appendChild(graphContainer);
    }

    function getColorForCommitCount(count) {
      if (count === 0) {
        return '<%= otheruser.profile_border_color%>20';
      } else if (count === 1) {
        return '#9be9a8';
      } else if (count === 2) {
        return '#40c463';
      } else if (count === 3) {
        return '#30a14e';
      } else {
        return '#216e39';
      }
    }

    if ('<%= otheruser.github_url %>') {
      fetchCommitGraph();
      fetchRepositories();
    } else {
      // Display a message when no GitHub information is available
      const repoTableBody = document.querySelector('#repo-table tbody');
      const row = document.createElement('tr');
      const cell = document.createElement('td');
      cell.setAttribute('colspan', '4');
      cell.textContent = 'No GitHub information available.';
      row.appendChild(cell);
      repoTableBody.appendChild(row);

      const commitGraphContainer = document.getElementById('commit-graph-container');
      const message = document.createElement('p');
      message.textContent = 'No GitHub information available.';
      commitGraphContainer.appendChild(message);
    }
    <% if (user) { %>
    document.getElementById('followForm').addEventListener('submit', async (event) => {
      event.preventDefault();
      const form = event.target;
      const response = await fetch(form.action, {
        method: form.method
      });
      const data = await response.json();
      document.getElementById('followButton').textContent = data.buttonText;
      document.getElementById('followerCount').textContent = data.followerCount;
      form.action = form.action.includes('follow') ? form.action.replace('follow', 'unfollow') : form.action.replace('unfollow', 'follow');
    });
    <% } %>

    function editImage() {
      // Show the URL input and update button
      document.getElementById("imageEditControls").style.display = "block";
    }

    function submitImageEdit() {
      // Get the new image URL from the input element
      const imageUrl = document.getElementById("imageUrl").value;

      // Hide the URL input and update button
      document.getElementById("imageEditControls").style.display = "none";

      // Continue only if the imageUrl is not empty
      if (imageUrl.trim() !== "") {
        // Send the POST request to the `/edits` endpoint with the imageURL
        fetch("/edits", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              avatar: imageUrl, // The 'avatar' field is being updated with the imageURL
            }),
          })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok.");
            }
            return response.json();
          })
          .then((data) => {

            // Update the profile picture preview with the new URL
            document.getElementById("profilePic").src = imageUrl;
            // You can redirect or refresh the page if needed
          })
          .catch((error) => {
            console.error("Error:", error);
            // You might want to show an error message to the user here
          });
      } else {
        // If imageUrl is empty, display an error or reset the view
        // You might want to show an error message to the user here
      }
    }

    function editField(field, button) {
      const displayElement = document.getElementById(`${field}-display`);
      const currentValue = displayElement.innerText;

      if (button.textContent === "Edit") {
        // If the button is in 'Edit' state, create an input field
        const inputField = document.createElement("input");
        inputField.type = "text";
        inputField.value = currentValue;
        inputField.id = `${field}-input`;
        inputField.classList.add("edit-input"); // Add this class to style the input

        displayElement.parentNode.insertBefore(inputField, displayElement);
        displayElement.style.display = "none"; // Hide the display element

        button.textContent = "Submit"; // Change button text to 'Submit'
        // Pass in the display element into the onclick handler
        button.onclick = function() {
          submitEdit(field, button, displayElement, inputField);
        };
      }
    }

    function submitEdit(field, button, displayElement, inputField) {
      const newValue = inputField.value;

      // Send the request to the server
      fetch("/edits", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            [field]: newValue
          }), // Use computed property names
        })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Network response was not ok.");
          }
          return response.json();
        })
        .then((data) => {


          // Update the display element and remove the textfield
          displayElement.innerText = newValue;
          displayElement.style.display = "block";
          inputField.remove();

          // Change the button text back to 'Edit' and restore the original onclick event
          button.textContent = "Edit";
          button.onclick = function() {
            editField(field, button); // Restore the editField function
          };
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    }

    function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + ' minutes ago';
      } else if (hours < 24) {
        formattedDate = hours + ' hours ago';
      } else if (days < 365) {
        formattedDate = days + ' days ago';
      } else {
        formattedDate = years + ' years ago';
      }
      return formattedDate;
    }

    function showSection(section) {
      // Hide both sections
      document.getElementById('posts').style.display = 'none';
      document.getElementById('comments').style.display = 'none';

      // Show the selected section
      document.getElementById(section).style.display = 'block';

      // Update the active class on the buttons
      document.querySelectorAll('.sort-option').forEach(button => {
        button.classList.remove('active');
      });

      document.querySelector(`.${section}-button`).classList.add('active');


    }
  </script>
</body>

</html>